/******************************************************************************
    Name: trabalhoMetodosDeOrdenacao.cpp
    Author: Beatriz Miranda da Silva
    Description: Sistema feito para mostrar a eficiencia de cada método de ordenação estudado nas aulas de Estrutura de Dados
    Data: 28/05/2025 07:41
*******************************************************************************/

#include <stdio.h>

//Sessão de prototipação

void menu(int);
void selectionSort(int *, int);
void bubbleSort(int *, int);
void insertionSort(int *, int);

int opcao, aux, i, j, k, chave, menor, maior; 
    

int main()
{
    
    printf("-- Menu de Métodos de Ordenação --\n\n");
    printf("1 - Bubble Sort \n");
    printf("2 - Selection Sort \n");
    printf("3 - Insertion Sort \n");
    printf("4 - Merge Sort \n");
    printf("5 - Heap Sort \n");
    printf("6 - Bogo Sort \n");
    printf("7 - Quick Sort \n\n");
    
    
    printf("Digite uma opçao ");
    scanf("%d", &opcao);
    
    menu(opcao);
    
    //vetor randomico
    
    srand(time(NULL));  // Inicializa o gerador de números aleatórios

    int vet[100];
    int tam = sizeof(vet)/sizeof(int);
      
    for (int i = 0; i < 100; i++) { // Preenche o vetor com valores aleatórios
        vet[i] = rand(); // Gera um valor aleatório entre 0 e RAND_MAX
      }
    
      for (int i = 0; i < 100; i++) {
        printf("%d ", vet[i]);
      }
      printf("\n");

    return 0;
}

//menu
void menu(int opcao){
    switch(opcao){
        case 1:
        printf("eae");
        break;
        
        case 2:
        printf("e nois");
        break;
    }
}
//fim do menu

/*//selection Sort
void selectionSort(){
    
    while(i < tam){
		menor = i;
		j = i+1;
		do{
			if(vet[j] < vet[menor]){
				menor = j;
				j++;
			}
		}while(j < tam);
		
		if(i != menor){
		aux = vet[i];
		vet[i] = vet[menor];
		vet[menor] = aux;
	}
	i++;
	}
}
//fim selection Sort*/

//bubble sort
void bubbleSort(int vet[], int tam){
    
    int troca, comp;
    
    while(tam > 0){
		for(i = 0; i < tam-1; i++){
			if(vet[i] > vet[i+1]){
				aux = vet[i+1];	// Variavel auxiliar
				vet[i+1] = vet[i];
				vet[i] = aux;
				troca++;
			};
			comp++;
		};
		tam--;
	};
}
//fim do bubble sort

/*/insertion sort
void insertionSort(int vet[], int tam){

	
	for(i=0; i < tam; i++){
		chave = vet[i];
		j = i - 1;
		
		while(j >= 0 && vet[j] > chave){
			vet[j + 1] = vet[j];
			j = j - 1;
		}
		vet[j+1] = chave;
	}
}
/*///fim do insertion sort
